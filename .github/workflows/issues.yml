on:
  issues:
    types: [opened]

env:
  modules:
    ml-1:
      regex: "/.*ml-1.*/"
      title: "Machine Learning 1: Grundlagen und statistische Lerntheorie"
      labels: ["AMI M. Sc.", "Wahlmodul (M. Sc.)"]
    ml-2:
      regex: "/.*ml-2.*/"
      title: "Machine Learning 2: Deep Learning"
      labels: ["AMI M. Sc.", "Wahlmodul (M. Sc.)"]
    sto-1:
      regex: "/.*sto-1.*/"
      title: "Stochastik 1"
      labels: ["AMI M. Sc.", "Wahlmodul (M. Sc.)"]
    muit:
      regex: "/.*muit.*/"
      title: "Maß- und Integrationstheorie"
      labels: ["AMI M. Sc.", "Wahlmodul (M. Sc.)"]
    nlp:
      regex: "/.*nlp.*/"
      title: "Natural Language Processing"
      labels: ["AMI M. Sc.", "Wahlmodul (M. Sc.)"]
  content-types:
    vorlesung:
      regex: "/.*(vorlesung|lecture).*/"
      labels: ["Module / Section"]
    uebung:
      regex: "/.*(übung|uebung|assignment).*/"
      labels: ["Assignment"]
    zettel:
      regex: "/.*(zettel|block).*/"
      labels: ["Zettel"]

jobs:
  # Apply labels based on the title of the issue
  # Uses above defined inputs
  apply-label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const inputs = {
              modules: ${{ toJson(env.modules) }},
              content-types: ${{ toJson(env.content-types) }}
            };
            const issue = context.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body.toLowerCase();
            const labels = [];
            for (const [content, contentData] of Object.entries(inputs.content-types)) {
              if (title.match(contentData.regex) || body.match(contentData.regex)) {
                labels.push(...contentData.labels);
              }
            }
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issue.number,
                labels: labels
              });
            }
            for (const [module, moduleData] of Object.entries(inputs.modules)) {
              if (title.match(moduleData.regex) || body.match(moduleData.regex)) {
                labels.push(...moduleData.labels);
              }
            }
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

  # Apply milestone based on the title of the issue
  # Uses above defined inputs and searches for open milestones with the same name as the label
  apply-milestone:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const inputs = {
              modules: ${{ toJson(env.modules) }},
            };
            const issue = context.issue;
            const title = issue.title.toLowerCase();
            const milestone = [];
            for (const [module, moduleData] of Object.entries(env.modules)) {
              if (title.match(moduleData.regex)) {
                milestone.push(moduleData.title);
              }
            }
            if (milestone.length > 0) {
              const milestones = await github.rest.issues.listMilestones({
                ...context.repo,
                state: "open"
              });
              for (const milestoneData of milestones.data) {
                if (milestoneData.title === milestone[0]) {
                  await github.rest.issues.update({
                    ...context.repo,
                    issue_number: issue.number,
                    milestone: milestoneData.number
                  });
                }
              }
            }
